<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\APM32F072\USBD_HID.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\APM32F072\USBD_HID.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon Feb 20 03:14:34 2023
<BR><P>
<H3>Maximum Stack Usage =        584 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
USBD_FS_InterfaceDescHandler &rArr; USBD_DESC_Ascii2Unicode
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2b]">ADC1_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b]">ADC1_COMP_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2b]">ADC1_COMP_IRQHandler</a> from startup_apm32f072.o(.text) referenced from startup_apm32f072.o(RESET)
 <LI><a href="#[3d]">CEC_CAN_IRQHandler</a> from startup_apm32f072.o(.text) referenced from startup_apm32f072.o(RESET)
 <LI><a href="#[28]">DMA1_CH1_IRQHandler</a> from startup_apm32f072.o(.text) referenced from startup_apm32f072.o(RESET)
 <LI><a href="#[29]">DMA1_CH2_3_IRQHandler</a> from startup_apm32f072.o(.text) referenced from startup_apm32f072.o(RESET)
 <LI><a href="#[2a]">DMA1_CH4_5_6_7_IRQHandler</a> from startup_apm32f072.o(.text) referenced from startup_apm32f072.o(RESET)
 <LI><a href="#[24]">EINT0_1_IRQHandler</a> from startup_apm32f072.o(.text) referenced from startup_apm32f072.o(RESET)
 <LI><a href="#[25]">EINT2_3_IRQHandler</a> from startup_apm32f072.o(.text) referenced from startup_apm32f072.o(RESET)
 <LI><a href="#[26]">EINT4_15_IRQHandler</a> from startup_apm32f072.o(.text) referenced from startup_apm32f072.o(RESET)
 <LI><a href="#[22]">FLASH_IRQHandler</a> from startup_apm32f072.o(.text) referenced from startup_apm32f072.o(RESET)
 <LI><a href="#[1b]">HardFault_Handler</a> from apm32f0xx_int.o(i.HardFault_Handler) referenced from startup_apm32f072.o(RESET)
 <LI><a href="#[36]">I2C1_IRQHandler</a> from startup_apm32f072.o(.text) referenced from startup_apm32f072.o(RESET)
 <LI><a href="#[37]">I2C2_IRQHandler</a> from startup_apm32f072.o(.text) referenced from startup_apm32f072.o(RESET)
 <LI><a href="#[52]">MyKeys_ProcessErrorState</a> from tsc_user.o(i.MyKeys_ProcessErrorState) referenced from tsc_user.o(.constdata)
 <LI><a href="#[54]">MyKeys_ProcessOffState</a> from tsc_user.o(i.MyKeys_ProcessOffState) referenced from tsc_user.o(.constdata)
 <LI><a href="#[1a]">NMI_Handler</a> from apm32f0xx_int.o(i.NMI_Handler) referenced from startup_apm32f072.o(RESET)
 <LI><a href="#[20]">PVD_VDDIO2_IRQHandler</a> from startup_apm32f072.o(.text) referenced from startup_apm32f072.o(RESET)
 <LI><a href="#[1d]">PendSV_Handler</a> from apm32f0xx_int.o(i.PendSV_Handler) referenced from startup_apm32f072.o(RESET)
 <LI><a href="#[23]">RCM_CRS_IRQHandler</a> from startup_apm32f072.o(.text) referenced from startup_apm32f072.o(RESET)
 <LI><a href="#[21]">RTC_IRQHandler</a> from startup_apm32f072.o(.text) referenced from startup_apm32f072.o(RESET)
 <LI><a href="#[19]">Reset_Handler</a> from startup_apm32f072.o(.text) referenced from startup_apm32f072.o(RESET)
 <LI><a href="#[38]">SPI1_IRQHandler</a> from startup_apm32f072.o(.text) referenced from startup_apm32f072.o(RESET)
 <LI><a href="#[39]">SPI2_IRQHandler</a> from startup_apm32f072.o(.text) referenced from startup_apm32f072.o(RESET)
 <LI><a href="#[1c]">SVC_Handler</a> from apm32f0xx_int.o(i.SVC_Handler) referenced from startup_apm32f072.o(RESET)
 <LI><a href="#[1e]">SysTick_Handler</a> from apm32f0xx_int.o(i.SysTick_Handler) referenced from startup_apm32f072.o(RESET)
 <LI><a href="#[40]">SystemInit</a> from system_apm32f0xx.o(i.SystemInit) referenced from startup_apm32f072.o(.text)
 <LI><a href="#[32]">TMR14_IRQHandler</a> from apm32f0xx_int.o(i.TMR14_IRQHandler) referenced from startup_apm32f072.o(RESET)
 <LI><a href="#[33]">TMR15_IRQHandler</a> from startup_apm32f072.o(.text) referenced from startup_apm32f072.o(RESET)
 <LI><a href="#[34]">TMR16_IRQHandler</a> from startup_apm32f072.o(.text) referenced from startup_apm32f072.o(RESET)
 <LI><a href="#[35]">TMR17_IRQHandler</a> from startup_apm32f072.o(.text) referenced from startup_apm32f072.o(RESET)
 <LI><a href="#[2c]">TMR1_BRK_UP_TRG_COM_IRQHandler</a> from startup_apm32f072.o(.text) referenced from startup_apm32f072.o(RESET)
 <LI><a href="#[2d]">TMR1_CC_IRQHandler</a> from startup_apm32f072.o(.text) referenced from startup_apm32f072.o(RESET)
 <LI><a href="#[2e]">TMR2_IRQHandler</a> from startup_apm32f072.o(.text) referenced from startup_apm32f072.o(RESET)
 <LI><a href="#[2f]">TMR3_IRQHandler</a> from startup_apm32f072.o(.text) referenced from startup_apm32f072.o(RESET)
 <LI><a href="#[30]">TMR6_DAC_IRQHandler</a> from startup_apm32f072.o(.text) referenced from startup_apm32f072.o(RESET)
 <LI><a href="#[31]">TMR7_IRQHandler</a> from startup_apm32f072.o(.text) referenced from startup_apm32f072.o(RESET)
 <LI><a href="#[27]">TSC_IRQHandler</a> from apm32f0xx_int.o(i.TSC_IRQHandler) referenced from startup_apm32f072.o(RESET)
 <LI><a href="#[55]">TSC_TouchKey_Config</a> from tsc_touchkey.o(i.TSC_TouchKey_Config) referenced from tsc_user.o(.constdata)
 <LI><a href="#[42]">TSC_TouchKey_ConfigCalibrationState</a> from tsc_touchkey.o(i.TSC_TouchKey_ConfigCalibrationState) referenced from tsc_ecs.o(i.TSC_Ecs_ProcessK)
 <LI><a href="#[56]">TSC_TouchKey_Process</a> from tsc_touchkey.o(i.TSC_TouchKey_Process) referenced from tsc_user.o(.constdata)
 <LI><a href="#[45]">TSC_TouchKey_ProcessCalibrationState</a> from tsc_touchkey.o(i.TSC_TouchKey_ProcessCalibrationState) referenced from tsc_user.o(.constdata)
 <LI><a href="#[46]">TSC_TouchKey_ProcessDebCalibrationState</a> from tsc_touchkey.o(i.TSC_TouchKey_ProcessDebCalibrationState) referenced from tsc_user.o(.constdata)
 <LI><a href="#[50]">TSC_TouchKey_ProcessDebDetectState</a> from tsc_touchkey.o(i.TSC_TouchKey_ProcessDebDetectState) referenced from tsc_user.o(.constdata)
 <LI><a href="#[53]">TSC_TouchKey_ProcessDebErrorState</a> from tsc_touchkey.o(i.TSC_TouchKey_ProcessDebErrorState) referenced 5 times from tsc_user.o(.constdata)
 <LI><a href="#[4d]">TSC_TouchKey_ProcessDebProxDetectState</a> from tsc_touchkey.o(i.TSC_TouchKey_ProcessDebProxDetectState) referenced from tsc_user.o(.constdata)
 <LI><a href="#[4c]">TSC_TouchKey_ProcessDebProxState</a> from tsc_touchkey.o(i.TSC_TouchKey_ProcessDebProxState) referenced from tsc_user.o(.constdata)
 <LI><a href="#[4e]">TSC_TouchKey_ProcessDebProxTouchState</a> from tsc_touchkey.o(i.TSC_TouchKey_ProcessDebProxTouchState) referenced from tsc_user.o(.constdata)
 <LI><a href="#[49]">TSC_TouchKey_ProcessDebReleaseDetectState</a> from tsc_touchkey.o(i.TSC_TouchKey_ProcessDebReleaseDetectState) referenced from tsc_user.o(.constdata)
 <LI><a href="#[48]">TSC_TouchKey_ProcessDebReleaseProxState</a> from tsc_touchkey.o(i.TSC_TouchKey_ProcessDebReleaseProxState) referenced from tsc_user.o(.constdata)
 <LI><a href="#[4a]">TSC_TouchKey_ProcessDebReleaseTouchState</a> from tsc_touchkey.o(i.TSC_TouchKey_ProcessDebReleaseTouchState) referenced from tsc_user.o(.constdata)
 <LI><a href="#[4f]">TSC_TouchKey_ProcessDetectState</a> from tsc_touchkey.o(i.TSC_TouchKey_ProcessDetectState) referenced from tsc_user.o(.constdata)
 <LI><a href="#[4b]">TSC_TouchKey_ProcessProxState</a> from tsc_touchkey.o(i.TSC_TouchKey_ProcessProxState) referenced from tsc_user.o(.constdata)
 <LI><a href="#[47]">TSC_TouchKey_ProcessReleaseState</a> from tsc_touchkey.o(i.TSC_TouchKey_ProcessReleaseState) referenced from tsc_user.o(.constdata)
 <LI><a href="#[51]">TSC_TouchKey_ProcessTouchState</a> from tsc_touchkey.o(i.TSC_TouchKey_ProcessTouchState) referenced from tsc_user.o(.constdata)
 <LI><a href="#[3a]">USART1_IRQHandler</a> from startup_apm32f072.o(.text) referenced from startup_apm32f072.o(RESET)
 <LI><a href="#[3b]">USART2_IRQHandler</a> from startup_apm32f072.o(.text) referenced from startup_apm32f072.o(RESET)
 <LI><a href="#[3c]">USART3_4_IRQHandler</a> from startup_apm32f072.o(.text) referenced from startup_apm32f072.o(RESET)
 <LI><a href="#[8]">USBD_DevQualifierDescHandler</a> from usbd_descriptor.o(i.USBD_DevQualifierDescHandler) referenced 2 times from usbd_descriptor.o(.data)
 <LI><a href="#[1]">USBD_FS_ConfigDescHandler</a> from usbd_descriptor.o(i.USBD_FS_ConfigDescHandler) referenced 2 times from usbd_descriptor.o(.data)
 <LI><a href="#[0]">USBD_FS_DeviceDescHandler</a> from usbd_descriptor.o(i.USBD_FS_DeviceDescHandler) referenced 2 times from usbd_descriptor.o(.data)
 <LI><a href="#[2]">USBD_FS_InterfaceDescHandler</a> from usbd_descriptor.o(i.USBD_FS_InterfaceDescHandler) referenced 2 times from usbd_descriptor.o(.data)
 <LI><a href="#[3]">USBD_FS_LangIdDescHandler</a> from usbd_descriptor.o(i.USBD_FS_LangIdDescHandler) referenced 2 times from usbd_descriptor.o(.data)
 <LI><a href="#[4]">USBD_FS_ManufacturerDescHandler</a> from usbd_descriptor.o(i.USBD_FS_ManufacturerDescHandler) referenced 2 times from usbd_descriptor.o(.data)
 <LI><a href="#[5]">USBD_FS_ProductDescHandler</a> from usbd_descriptor.o(i.USBD_FS_ProductDescHandler) referenced 2 times from usbd_descriptor.o(.data)
 <LI><a href="#[6]">USBD_FS_SerialDescHandler</a> from usbd_descriptor.o(i.USBD_FS_SerialDescHandler) referenced 2 times from usbd_descriptor.o(.data)
 <LI><a href="#[15]">USBD_HID_ClassDeInitHandler</a> from usbd_hid.o(i.USBD_HID_ClassDeInitHandler) referenced 2 times from usbd_hid.o(.data)
 <LI><a href="#[14]">USBD_HID_ClassInitHandler</a> from usbd_hid.o(i.USBD_HID_ClassInitHandler) referenced 2 times from usbd_hid.o(.data)
 <LI><a href="#[18]">USBD_HID_DataInHandler</a> from usbd_hid.o(i.USBD_HID_DataInHandler) referenced 2 times from usbd_hid.o(.data)
 <LI><a href="#[16]">USBD_HID_SOFHandler</a> from usbd_hid.o(i.USBD_HID_SOFHandler) referenced 2 times from usbd_hid.o(.data)
 <LI><a href="#[17]">USBD_HID_SetupHandler</a> from usbd_hid.o(i.USBD_HID_SetupHandler) referenced 2 times from usbd_hid.o(.data)
 <LI><a href="#[3e]">USBD_IRQHandler</a> from apm32f0xx_int.o(i.USBD_IRQHandler) referenced from startup_apm32f072.o(RESET)
 <LI><a href="#[7]">USBD_OtherSpeedConfigDescHandler</a> from usbd_descriptor.o(i.USBD_OtherSpeedConfigDescHandler) referenced 2 times from usbd_descriptor.o(.data)
 <LI><a href="#[a]">USBD_REQ_ClearFeature</a> from usbd_stdreq.o(i.USBD_REQ_ClearFeature) referenced 2 times from usbd_stdreq.o(.data)
 <LI><a href="#[f]">USBD_REQ_GetCfg</a> from usbd_stdreq.o(i.USBD_REQ_GetCfg) referenced 2 times from usbd_stdreq.o(.data)
 <LI><a href="#[d]">USBD_REQ_GetDesc</a> from usbd_stdreq.o(i.USBD_REQ_GetDesc) referenced 2 times from usbd_stdreq.o(.data)
 <LI><a href="#[11]">USBD_REQ_GetItf</a> from usbd_stdreq.o(i.USBD_REQ_GetItf) referenced 2 times from usbd_stdreq.o(.data)
 <LI><a href="#[9]">USBD_REQ_GetStatus</a> from usbd_stdreq.o(i.USBD_REQ_GetStatus) referenced 2 times from usbd_stdreq.o(.data)
 <LI><a href="#[c]">USBD_REQ_SetAddress</a> from usbd_stdreq.o(i.USBD_REQ_SetAddress) referenced 2 times from usbd_stdreq.o(.data)
 <LI><a href="#[10]">USBD_REQ_SetCfg</a> from usbd_stdreq.o(i.USBD_REQ_SetCfg) referenced 2 times from usbd_stdreq.o(.data)
 <LI><a href="#[e]">USBD_REQ_SetDesc</a> from usbd_stdreq.o(i.USBD_REQ_SetDesc) referenced 2 times from usbd_stdreq.o(.data)
 <LI><a href="#[b]">USBD_REQ_SetFeature</a> from usbd_stdreq.o(i.USBD_REQ_SetFeature) referenced 2 times from usbd_stdreq.o(.data)
 <LI><a href="#[12]">USBD_REQ_SetItf</a> from usbd_stdreq.o(i.USBD_REQ_SetItf) referenced 2 times from usbd_stdreq.o(.data)
 <LI><a href="#[13]">USBD_REQ_SyncFrame</a> from usbd_stdreq.o(i.USBD_REQ_SyncFrame) referenced 2 times from usbd_stdreq.o(.data)
 <LI><a href="#[43]">USB_DevUserHandler</a> from usb_device_user.o(i.USB_DevUserHandler) referenced from usb_device_user.o(i.USB_DeviceInit)
 <LI><a href="#[1f]">WWDT_IRQHandler</a> from startup_apm32f072.o(.text) referenced from startup_apm32f072.o(RESET)
 <LI><a href="#[41]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_apm32f072.o(.text)
 <LI><a href="#[44]">fputc</a> from main.o(i.fputc) referenced from printfb.o(i.__0printf$bare)
 <LI><a href="#[3f]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[41]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f072.o(.text)
</UL>
<P><STRONG><a name="[129]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[57]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[5c]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[12a]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[12b]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[12c]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[12d]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[12e]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[19]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_apm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f072.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>ADC1_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f072.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f072.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>CEC_CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f072.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_CH1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f072.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_CH2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f072.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_CH4_5_6_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f072.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EINT0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f072.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EINT2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f072.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EINT4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f072.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f072.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f072.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f072.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>PVD_VDDIO2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f072.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>RCM_CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f072.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f072.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f072.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f072.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TMR15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f072.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TMR16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f072.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TMR17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f072.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TMR1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f072.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TMR1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f072.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f072.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f072.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TMR6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f072.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TMR7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f072.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f072.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f072.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>USART3_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f072.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_apm32f072.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f072.o(RESET)
</UL>
<P><STRONG><a name="[12f]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APM_DelayInit
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ReadSYSCLKFreq
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Time_Config
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Acq_Config
</UL>

<P><STRONG><a name="[5a]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[130]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_ClassInitHandler
</UL>

<P><STRONG><a name="[132]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[d2]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DESC_Ascii2Unicode
</UL>

<P><STRONG><a name="[58]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[134]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>APM_DelayInit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, bsp_delay.o(i.APM_DelayInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = APM_DelayInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HardwareInit
</UL>

<P><STRONG><a name="[74]"></a>APM_DelayMs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_delay.o(i.APM_DelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = APM_DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_TSCHandler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidMouse_Proc
</UL>

<P><STRONG><a name="[7e]"></a>APM_DelayTickDec</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bsp_delay.o(i.APM_DelayTickDec))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[60]"></a>APM_EVAL_COMInit</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, board_apm32f072_eval.o(i.APM_EVAL_COMInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = APM_EVAL_COMInit &rArr; USART_Config &rArr; RCM_ReadUSART2CLKFreq &rArr; RCM_ReadPCLKFreq &rArr; RCM_ReadSYSCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EnableInterrupt
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Enable
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_EnableAHBPeriphClock
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ConfigPinAF
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_EnableAPB2PeriphClock
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_EnableAPB1PeriphClock
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6a]"></a>APM_EVAL_LEDInit</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, board_apm32f072_eval.o(i.APM_EVAL_LEDInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = APM_EVAL_LEDInit &rArr; GPIO_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_EnableAHBPeriphClock
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>APM_EVAL_LEDToggle</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, board_apm32f072_eval.o(i.APM_EVAL_LEDToggle))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR14_Isr
</UL>

<P><STRONG><a name="[6b]"></a>APM_EVAL_PBInit</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, board_apm32f072_eval.o(i.APM_EVAL_PBInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = APM_EVAL_PBInit &rArr; NVIC_EnableIRQRequest &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_EnableAHBPeriphClock
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EINT_Config
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_EnableAPB2PeriphClock
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>APM_EVAL_TMR14_Init</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, tsc_user.o(i.APM_EVAL_TMR14_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = APM_EVAL_TMR14_Init &rArr; NVIC_EnableIRQRequest &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_EnableInterrupt
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Enable
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_ConfigTimeBase
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_EnableAPB2PeriphClock
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_EnableAPB1PeriphClock
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b4]"></a>CRS_ConfigSynchronizationSource</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, apm32f0xx_crs.o(i.CRS_ConfigSynchronizationSource))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClockInit
</UL>

<P><STRONG><a name="[b5]"></a>CRS_EnableAutomaticCalibration</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, apm32f0xx_crs.o(i.CRS_EnableAutomaticCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClockInit
</UL>

<P><STRONG><a name="[b6]"></a>CRS_EnableFrequencyErrorCounter</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, apm32f0xx_crs.o(i.CRS_EnableFrequencyErrorCounter))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClockInit
</UL>

<P><STRONG><a name="[6c]"></a>EINT_Config</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, apm32f0xx_eint.o(i.EINT_Config))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APM_EVAL_PBInit
</UL>

<P><STRONG><a name="[65]"></a>GPIO_Config</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, apm32f0xx_gpio.o(i.GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APM_EVAL_PBInit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APM_EVAL_LEDInit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APM_EVAL_COMInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Acq_ConfigGPIO
</UL>

<P><STRONG><a name="[64]"></a>GPIO_ConfigPinAF</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, apm32f0xx_gpio.o(i.GPIO_ConfigPinAF))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_ConfigPinAF
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APM_EVAL_COMInit
</UL>

<P><STRONG><a name="[76]"></a>GPIO_ReadInputBit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, apm32f0xx_gpio.o(i.GPIO_ReadInputBit))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidMouse_ReadKey
</UL>

<P><STRONG><a name="[1b]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, apm32f0xx_int.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f072.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>HidMouse_Proc</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, tsc_user.o(i.HidMouse_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HidMouse_Proc &rArr; HidMouse_Write &rArr; USBD_HID_TxReport &rArr; USBD_EP_TransferCallback &rArr; USBD_EP_Transfer &rArr; USBD_EP_XferStart &rArr; USBD_EP_SetTxCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_TxReport
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APM_DelayMs
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidMouse_Write
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidMouse_ReadKey
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[72]"></a>HidMouse_ReadKey</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tsc_user.o(i.HidMouse_ReadKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HidMouse_ReadKey
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputBit
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidMouse_Proc
</UL>

<P><STRONG><a name="[73]"></a>HidMouse_Write</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, tsc_user.o(i.HidMouse_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HidMouse_Write &rArr; USBD_HID_TxReport &rArr; USBD_EP_TransferCallback &rArr; USBD_EP_Transfer &rArr; USBD_EP_XferStart &rArr; USBD_EP_SetTxCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_TxReport
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidMouse_Proc
</UL>

<P><STRONG><a name="[77]"></a>Menu_TSCHandler</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, tsc_user.o(i.Menu_TSCHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Menu_TSCHandler &rArr; USBD_HID_TxReport &rArr; USBD_EP_TransferCallback &rArr; USBD_EP_Transfer &rArr; USBD_EP_XferStart &rArr; USBD_EP_SetTxCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_TxReport
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APM_DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[52]"></a>MyKeys_ProcessErrorState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tsc_user.o(i.MyKeys_ProcessErrorState))
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_TouchKey_ConfigOffState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsc_user.o(.constdata)
</UL>
<P><STRONG><a name="[54]"></a>MyKeys_ProcessOffState</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tsc_user.o(i.MyKeys_ProcessOffState))
<BR>[Address Reference Count : 1]<UL><LI> tsc_user.o(.constdata)
</UL>
<P><STRONG><a name="[1a]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, apm32f0xx_int.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f072.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>NVIC_EnableIRQRequest</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, apm32f0xx_misc.o(i.NVIC_EnableIRQRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_EnableIRQRequest &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APM_EVAL_PBInit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APM_EVAL_COMInit
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APM_EVAL_TMR14_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HardwareInit
</UL>

<P><STRONG><a name="[1d]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, apm32f0xx_int.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f072.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>RCM_ConfigUSBCLK</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, apm32f0xx_rcm.o(i.RCM_ConfigUSBCLK))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClockInit
</UL>

<P><STRONG><a name="[61]"></a>RCM_EnableAHBPeriphClock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apm32f0xx_rcm.o(i.RCM_EnableAHBPeriphClock))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APM_EVAL_PBInit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APM_EVAL_LEDInit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APM_EVAL_COMInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Acq_ConfigGPIO
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Acq_Config
</UL>

<P><STRONG><a name="[63]"></a>RCM_EnableAPB1PeriphClock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apm32f0xx_rcm.o(i.RCM_EnableAPB1PeriphClock))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APM_EVAL_COMInit
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APM_EVAL_TMR14_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClockInit
</UL>

<P><STRONG><a name="[62]"></a>RCM_EnableAPB2PeriphClock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apm32f0xx_rcm.o(i.RCM_EnableAPB2PeriphClock))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APM_EVAL_PBInit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APM_EVAL_COMInit
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APM_EVAL_TMR14_Init
</UL>

<P><STRONG><a name="[b2]"></a>RCM_EnableHSI48</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, apm32f0xx_rcm.o(i.RCM_EnableHSI48))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClockInit
</UL>

<P><STRONG><a name="[7a]"></a>RCM_ReadPCLKFreq</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, apm32f0xx_rcm.o(i.RCM_ReadPCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = RCM_ReadPCLKFreq &rArr; RCM_ReadSYSCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ReadSYSCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ReadUSART2CLKFreq
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ReadUSART1CLKFreq
</UL>

<P><STRONG><a name="[7b]"></a>RCM_ReadSYSCLKFreq</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, apm32f0xx_rcm.o(i.RCM_ReadSYSCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RCM_ReadSYSCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ReadUSART2CLKFreq
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ReadUSART1CLKFreq
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ReadPCLKFreq
</UL>

<P><STRONG><a name="[7c]"></a>RCM_ReadUSART1CLKFreq</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, apm32f0xx_rcm.o(i.RCM_ReadUSART1CLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = RCM_ReadUSART1CLKFreq &rArr; RCM_ReadPCLKFreq &rArr; RCM_ReadSYSCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ReadSYSCLKFreq
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ReadPCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[7d]"></a>RCM_ReadUSART2CLKFreq</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, apm32f0xx_rcm.o(i.RCM_ReadUSART2CLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = RCM_ReadUSART2CLKFreq &rArr; RCM_ReadPCLKFreq &rArr; RCM_ReadSYSCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ReadSYSCLKFreq
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ReadPCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[1c]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, apm32f0xx_int.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f072.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>SoftDelay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tsc_acq.o(i.SoftDelay))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Acq_StartPerConfigBlock
</UL>

<P><STRONG><a name="[1e]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, apm32f0xx_int.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APM_DelayTickDec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f072.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SystemInit</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, system_apm32f0xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; SystemClockConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f072.o(.text)
</UL>
<P><STRONG><a name="[32]"></a>TMR14_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, apm32f0xx_int.o(i.TMR14_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMR14_IRQHandler &rArr; TMR14_Isr
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR14_Isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f072.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>TMR14_Isr</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, tsc_user.o(i.TMR14_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMR14_Isr
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_ReadIntFlag
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_ClearIntFlag
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APM_EVAL_LEDToggle
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR14_IRQHandler
</UL>

<P><STRONG><a name="[83]"></a>TMR_ClearIntFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, apm32f0xx_tmr.o(i.TMR_ClearIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR14_Isr
</UL>

<P><STRONG><a name="[6e]"></a>TMR_ConfigTimeBase</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, apm32f0xx_tmr.o(i.TMR_ConfigTimeBase))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMR_ConfigTimeBase
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APM_EVAL_TMR14_Init
</UL>

<P><STRONG><a name="[70]"></a>TMR_Enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apm32f0xx_tmr.o(i.TMR_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APM_EVAL_TMR14_Init
</UL>

<P><STRONG><a name="[6f]"></a>TMR_EnableInterrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, apm32f0xx_tmr.o(i.TMR_EnableInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APM_EVAL_TMR14_Init
</UL>

<P><STRONG><a name="[82]"></a>TMR_ReadIntFlag</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, apm32f0xx_tmr.o(i.TMR_ReadIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR14_Isr
</UL>

<P><STRONG><a name="[97]"></a>TSC_Acq_CheckNoise</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tsc_acq.o(i.TSC_Acq_CheckNoise))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Acq_ReadBlockResult
</UL>

<P><STRONG><a name="[96]"></a>TSC_Acq_ComputeDelta</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tsc_acq.o(i.TSC_Acq_ComputeDelta))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Acq_ReadBlockResult
</UL>

<P><STRONG><a name="[a3]"></a>TSC_Acq_ComputeMeas</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tsc_acq.o(i.TSC_Acq_ComputeMeas))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Ecs_ProcessK
</UL>

<P><STRONG><a name="[85]"></a>TSC_Acq_Config</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, tsc_acq.o(i.TSC_Acq_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TSC_Acq_Config &rArr; TSC_Acq_ConfigGPIO &rArr; GPIO_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_EnableAHBPeriphClock
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Acq_ConfigGPIO
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Config
</UL>

<P><STRONG><a name="[ac]"></a>TSC_Acq_ConfigBlock</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, tsc_acq.o(i.TSC_Acq_ConfigBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TSC_Acq_ConfigBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_User_Action
</UL>

<P><STRONG><a name="[86]"></a>TSC_Acq_ConfigGPIO</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, tsc_acq.o(i.TSC_Acq_ConfigGPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TSC_Acq_ConfigGPIO &rArr; GPIO_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_EnableAHBPeriphClock
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Acq_Schmitt_Trigger_Hysteresis
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Acq_Sampling_Capacitor
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Acq_GPIOC_SAMPCAP
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Acq_GPIOC_CHANNEL_SHIELD
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Acq_GPIOB_SAMPCAP
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Acq_GPIOB_CHANNEL_SHIELD
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Acq_GPIOB_AF3_L
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Acq_GPIOB_AF3_H
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Acq_GPIOA_SAMPCAP
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Acq_GPIOA_CHANNEL_SHIELD
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Acq_GPIOA_AF3_L
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Acq_GPIOA_AF3_H
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Acq_Config
</UL>

<P><STRONG><a name="[8e]"></a>TSC_Acq_GPIOA_AF3_H</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tsc_acq.o(i.TSC_Acq_GPIOA_AF3_H))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Acq_ConfigGPIO
</UL>

<P><STRONG><a name="[8d]"></a>TSC_Acq_GPIOA_AF3_L</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tsc_acq.o(i.TSC_Acq_GPIOA_AF3_L))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Acq_ConfigGPIO
</UL>

<P><STRONG><a name="[8a]"></a>TSC_Acq_GPIOA_CHANNEL_SHIELD</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tsc_acq.o(i.TSC_Acq_GPIOA_CHANNEL_SHIELD))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Acq_ConfigGPIO
</UL>

<P><STRONG><a name="[87]"></a>TSC_Acq_GPIOA_SAMPCAP</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tsc_acq.o(i.TSC_Acq_GPIOA_SAMPCAP))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Acq_ConfigGPIO
</UL>

<P><STRONG><a name="[90]"></a>TSC_Acq_GPIOB_AF3_H</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tsc_acq.o(i.TSC_Acq_GPIOB_AF3_H))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Acq_ConfigGPIO
</UL>

<P><STRONG><a name="[8f]"></a>TSC_Acq_GPIOB_AF3_L</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tsc_acq.o(i.TSC_Acq_GPIOB_AF3_L))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Acq_ConfigGPIO
</UL>

<P><STRONG><a name="[8b]"></a>TSC_Acq_GPIOB_CHANNEL_SHIELD</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tsc_acq.o(i.TSC_Acq_GPIOB_CHANNEL_SHIELD))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Acq_ConfigGPIO
</UL>

<P><STRONG><a name="[88]"></a>TSC_Acq_GPIOB_SAMPCAP</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tsc_acq.o(i.TSC_Acq_GPIOB_SAMPCAP))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Acq_ConfigGPIO
</UL>

<P><STRONG><a name="[8c]"></a>TSC_Acq_GPIOC_CHANNEL_SHIELD</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tsc_acq.o(i.TSC_Acq_GPIOC_CHANNEL_SHIELD))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Acq_ConfigGPIO
</UL>

<P><STRONG><a name="[89]"></a>TSC_Acq_GPIOC_SAMPCAP</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tsc_acq.o(i.TSC_Acq_GPIOC_SAMPCAP))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Acq_ConfigGPIO
</UL>

<P><STRONG><a name="[93]"></a>TSC_Acq_ReadBlockResult</STRONG> (Thumb, 430 bytes, Stack size 56 bytes, tsc_acq.o(i.TSC_Acq_ReadBlockResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TSC_Acq_ReadBlockResult
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Acq_UseFilter
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Acq_ReadMeasurVal
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Acq_ComputeDelta
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Acq_CheckNoise
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_User_Action
</UL>

<P><STRONG><a name="[94]"></a>TSC_Acq_ReadMeasurVal</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tsc_acq.o(i.TSC_Acq_ReadMeasurVal))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Acq_ReadBlockResult
</UL>

<P><STRONG><a name="[92]"></a>TSC_Acq_Sampling_Capacitor</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tsc_acq.o(i.TSC_Acq_Sampling_Capacitor))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Acq_ConfigGPIO
</UL>

<P><STRONG><a name="[91]"></a>TSC_Acq_Schmitt_Trigger_Hysteresis</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, tsc_acq.o(i.TSC_Acq_Schmitt_Trigger_Hysteresis))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Acq_ConfigGPIO
</UL>

<P><STRONG><a name="[98]"></a>TSC_Acq_StartPerConfigBlock</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, tsc_acq.o(i.TSC_Acq_StartPerConfigBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TSC_Acq_StartPerConfigBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_User_Action
</UL>

<P><STRONG><a name="[a9]"></a>TSC_Acq_TestFirstReference</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tsc_acq.o(i.TSC_Acq_TestFirstReference))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_TouchKey_ProcessCalibrationState
</UL>

<P><STRONG><a name="[a4]"></a>TSC_Acq_TestReferenceRange</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tsc_acq.o(i.TSC_Acq_TestReferenceRange))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Ecs_ProcessK
</UL>

<P><STRONG><a name="[95]"></a>TSC_Acq_UseFilter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tsc_acq.o(i.TSC_Acq_UseFilter))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Acq_ReadBlockResult
</UL>

<P><STRONG><a name="[ad]"></a>TSC_Acq_WaitBlockEOA</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tsc_acq.o(i.TSC_Acq_WaitBlockEOA))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_User_Action
</UL>

<P><STRONG><a name="[9a]"></a>TSC_Config</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tsc.o(i.TSC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TSC_Config &rArr; TSC_Acq_Config &rArr; TSC_Acq_ConfigGPIO &rArr; GPIO_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Time_Config
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Acq_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_User_Config
</UL>

<P><STRONG><a name="[9c]"></a>TSC_DetectHandler</STRONG> (Thumb, 116 bytes, Stack size 4 bytes, tsc_user.o(i.TSC_DetectHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TSC_DetectHandler &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ae]"></a>TSC_Dxs_FirstObj</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tsc_dxs.o(i.TSC_Dxs_FirstObj))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_User_Action
</UL>

<P><STRONG><a name="[9e]"></a>TSC_Ecs_CalculateK</STRONG> (Thumb, 204 bytes, Stack size 56 bytes, tsc_ecs.o(i.TSC_Ecs_CalculateK))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TSC_Ecs_CalculateK
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Obj_ConfigGlobalObj
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Ecs_Process
</UL>

<P><STRONG><a name="[a0]"></a>TSC_Ecs_Process</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, tsc_ecs.o(i.TSC_Ecs_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TSC_Ecs_Process &rArr; TSC_Ecs_CalculateK
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Time_Delay_ms
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Ecs_ProcessK
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Ecs_CalculateK
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_User_Action
</UL>

<P><STRONG><a name="[a2]"></a>TSC_Ecs_ProcessK</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, tsc_ecs.o(i.TSC_Ecs_ProcessK))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TSC_Ecs_ProcessK
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Obj_ConfigGlobalObj
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Acq_TestReferenceRange
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Acq_ComputeMeas
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Ecs_Process
</UL>

<P><STRONG><a name="[27]"></a>TSC_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, apm32f0xx_int.o(i.TSC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f072.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>TSC_Obj_ConfigGlobalObj</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tsc_object.o(i.TSC_Obj_ConfigGlobalObj))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Obj_ProcessGroup
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Obj_ConfigGroup
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Ecs_ProcessK
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Ecs_CalculateK
</UL>

<P><STRONG><a name="[a5]"></a>TSC_Obj_ConfigGroup</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, tsc_object.o(i.TSC_Obj_ConfigGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TSC_Obj_ConfigGroup
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Obj_ConfigGlobalObj
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_User_Config
</UL>

<P><STRONG><a name="[a6]"></a>TSC_Obj_ProcessGroup</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, tsc_object.o(i.TSC_Obj_ProcessGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TSC_Obj_ProcessGroup
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Obj_ConfigGlobalObj
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_User_Action
</UL>

<P><STRONG><a name="[a7]"></a>TSC_ReleaseHandler</STRONG> (Thumb, 116 bytes, Stack size 4 bytes, tsc_user.o(i.TSC_ReleaseHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TSC_ReleaseHandler &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9b]"></a>TSC_Time_Config</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, tsc_time.o(i.TSC_Time_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TSC_Time_Config &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Config
</UL>

<P><STRONG><a name="[a1]"></a>TSC_Time_Delay_ms</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, tsc_time.o(i.TSC_Time_Delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TSC_Time_Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Ecs_Process
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_User_Action
</UL>

<P><STRONG><a name="[55]"></a>TSC_TouchKey_Config</STRONG> (Thumb, 100 bytes, Stack size 4 bytes, tsc_touchkey.o(i.TSC_TouchKey_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TSC_TouchKey_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_TouchKey_ConfigCalibrationState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsc_user.o(.constdata)
</UL>
<P><STRONG><a name="[42]"></a>TSC_TouchKey_ConfigCalibrationState</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, tsc_touchkey.o(i.TSC_TouchKey_ConfigCalibrationState))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_TouchKey_ProcessReleaseState
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_TouchKey_ProcessDebErrorState
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_TouchKey_ProcessDebCalibrationState
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_TouchKey_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsc_ecs.o(i.TSC_Ecs_ProcessK)
</UL>
<P><STRONG><a name="[78]"></a>TSC_TouchKey_ConfigOffState</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, tsc_touchkey.o(i.TSC_TouchKey_ConfigOffState))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyKeys_ProcessErrorState
</UL>

<P><STRONG><a name="[56]"></a>TSC_TouchKey_Process</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, tsc_touchkey.o(i.TSC_TouchKey_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TSC_TouchKey_Process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsc_user.o(.constdata)
</UL>
<P><STRONG><a name="[45]"></a>TSC_TouchKey_ProcessCalibrationState</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, tsc_touchkey.o(i.TSC_TouchKey_ProcessCalibrationState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TSC_TouchKey_ProcessCalibrationState
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Acq_TestFirstReference
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsc_user.o(.constdata)
</UL>
<P><STRONG><a name="[46]"></a>TSC_TouchKey_ProcessDebCalibrationState</STRONG> (Thumb, 118 bytes, Stack size 4 bytes, tsc_touchkey.o(i.TSC_TouchKey_ProcessDebCalibrationState))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TSC_TouchKey_ProcessDebCalibrationState
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_TouchKey_ConfigCalibrationState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsc_user.o(.constdata)
</UL>
<P><STRONG><a name="[50]"></a>TSC_TouchKey_ProcessDebDetectState</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, tsc_touchkey.o(i.TSC_TouchKey_ProcessDebDetectState))
<BR>[Address Reference Count : 1]<UL><LI> tsc_user.o(.constdata)
</UL>
<P><STRONG><a name="[53]"></a>TSC_TouchKey_ProcessDebErrorState</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, tsc_touchkey.o(i.TSC_TouchKey_ProcessDebErrorState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TSC_TouchKey_ProcessDebErrorState
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_TouchKey_ReadStateMask
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_TouchKey_ConfigCalibrationState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsc_user.o(.constdata)
</UL>
<P><STRONG><a name="[4d]"></a>TSC_TouchKey_ProcessDebProxDetectState</STRONG> (Thumb, 196 bytes, Stack size 0 bytes, tsc_touchkey.o(i.TSC_TouchKey_ProcessDebProxDetectState))
<BR>[Address Reference Count : 1]<UL><LI> tsc_user.o(.constdata)
</UL>
<P><STRONG><a name="[4c]"></a>TSC_TouchKey_ProcessDebProxState</STRONG> (Thumb, 196 bytes, Stack size 0 bytes, tsc_touchkey.o(i.TSC_TouchKey_ProcessDebProxState))
<BR>[Address Reference Count : 1]<UL><LI> tsc_user.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>TSC_TouchKey_ProcessDebProxTouchState</STRONG> (Thumb, 196 bytes, Stack size 0 bytes, tsc_touchkey.o(i.TSC_TouchKey_ProcessDebProxTouchState))
<BR>[Address Reference Count : 1]<UL><LI> tsc_user.o(.constdata)
</UL>
<P><STRONG><a name="[49]"></a>TSC_TouchKey_ProcessDebReleaseDetectState</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, tsc_touchkey.o(i.TSC_TouchKey_ProcessDebReleaseDetectState))
<BR>[Address Reference Count : 1]<UL><LI> tsc_user.o(.constdata)
</UL>
<P><STRONG><a name="[48]"></a>TSC_TouchKey_ProcessDebReleaseProxState</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, tsc_touchkey.o(i.TSC_TouchKey_ProcessDebReleaseProxState))
<BR>[Address Reference Count : 1]<UL><LI> tsc_user.o(.constdata)
</UL>
<P><STRONG><a name="[4a]"></a>TSC_TouchKey_ProcessDebReleaseTouchState</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, tsc_touchkey.o(i.TSC_TouchKey_ProcessDebReleaseTouchState))
<BR>[Address Reference Count : 1]<UL><LI> tsc_user.o(.constdata)
</UL>
<P><STRONG><a name="[4f]"></a>TSC_TouchKey_ProcessDetectState</STRONG> (Thumb, 224 bytes, Stack size 0 bytes, tsc_touchkey.o(i.TSC_TouchKey_ProcessDetectState))
<BR>[Address Reference Count : 1]<UL><LI> tsc_user.o(.constdata)
</UL>
<P><STRONG><a name="[4b]"></a>TSC_TouchKey_ProcessProxState</STRONG> (Thumb, 224 bytes, Stack size 0 bytes, tsc_touchkey.o(i.TSC_TouchKey_ProcessProxState))
<BR>[Address Reference Count : 1]<UL><LI> tsc_user.o(.constdata)
</UL>
<P><STRONG><a name="[47]"></a>TSC_TouchKey_ProcessReleaseState</STRONG> (Thumb, 296 bytes, Stack size 4 bytes, tsc_touchkey.o(i.TSC_TouchKey_ProcessReleaseState))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TSC_TouchKey_ProcessReleaseState
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_TouchKey_ConfigCalibrationState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsc_user.o(.constdata)
</UL>
<P><STRONG><a name="[51]"></a>TSC_TouchKey_ProcessTouchState</STRONG> (Thumb, 224 bytes, Stack size 0 bytes, tsc_touchkey.o(i.TSC_TouchKey_ProcessTouchState))
<BR>[Address Reference Count : 1]<UL><LI> tsc_user.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>TSC_TouchKey_ReadStateMask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tsc_touchkey.o(i.TSC_TouchKey_ReadStateMask))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_TouchKey_ProcessDebErrorState
</UL>

<P><STRONG><a name="[ab]"></a>TSC_User_Action</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, tsc_user.o(i.TSC_User_Action))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TSC_User_Action &rArr; TSC_Ecs_Process &rArr; TSC_Ecs_CalculateK
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Time_Delay_ms
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Obj_ProcessGroup
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Ecs_Process
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Dxs_FirstObj
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Acq_WaitBlockEOA
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Acq_StartPerConfigBlock
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Acq_ReadBlockResult
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Acq_ConfigBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[af]"></a>TSC_User_Config</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tsc_user.o(i.TSC_User_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TSC_User_Config &rArr; TSC_Config &rArr; TSC_Acq_Config &rArr; TSC_Acq_ConfigGPIO &rArr; GPIO_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Obj_ConfigGroup
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Config
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_User_Thresholds
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0]"></a>TSC_User_Thresholds</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tsc_user.o(i.TSC_User_Thresholds))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_User_Config
</UL>

<P><STRONG><a name="[66]"></a>USART_Config</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, apm32f0xx_usart.o(i.USART_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USART_Config &rArr; RCM_ReadUSART2CLKFreq &rArr; RCM_ReadPCLKFreq &rArr; RCM_ReadSYSCLKFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ReadUSART2CLKFreq
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ReadUSART1CLKFreq
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ReadPCLKFreq
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APM_EVAL_COMInit
</UL>

<P><STRONG><a name="[69]"></a>USART_Enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apm32f0xx_usart.o(i.USART_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APM_EVAL_COMInit
</UL>

<P><STRONG><a name="[67]"></a>USART_EnableInterrupt</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, apm32f0xx_usart.o(i.USART_EnableInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APM_EVAL_COMInit
</UL>

<P><STRONG><a name="[128]"></a>USART_ReadStatusFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, apm32f0xx_usart.o(i.USART_ReadStatusFlag))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[127]"></a>USART_TxData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, apm32f0xx_usart.o(i.USART_TxData))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[10e]"></a>USBD_ClearIntFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, apm32f0xx_usb.o(i.USBD_ClearIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IsrHandler
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SuspendHandler
</UL>

<P><STRONG><a name="[b1]"></a>USBD_ClockInit</STRONG> (Thumb, 252 bytes, Stack size 8 bytes, usbd_board.o(i.USBD_ClockInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_ClockInit
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_EnableAPB1PeriphClock
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_EnableHSI48
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ConfigUSBCLK
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRS_EnableFrequencyErrorCounter
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRS_EnableAutomaticCalibration
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRS_ConfigSynchronizationSource
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ResumeCallback
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HardwareInit
</UL>

<P><STRONG><a name="[b7]"></a>USBD_Config</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, apm32f0xx_usb_device.o(i.USBD_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_Config &rArr; USBD_ConfigPMA
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ConfigPMA
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ConfigLinkPowerMode
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetForceSuspend
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HardwareInit
</UL>

<P><STRONG><a name="[bb]"></a>USBD_ConfigEP</STRONG> (Thumb, 316 bytes, Stack size 12 bytes, apm32f0xx_usb.o(i.USBD_ConfigEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBD_ConfigEP &rArr; USBD_EP_SetRxCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_SetType
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_SetTxStatus
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_SetTxAddr
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_SetRxStatus
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_SetRxCnt
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_SetRxAddr
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_SetKind
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_SetAddr
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ResetTxToggle
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ResetRxToggle
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_Open
</UL>

<P><STRONG><a name="[b9]"></a>USBD_ConfigLinkPowerMode</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, apm32f0xx_usb_device.o(i.USBD_ConfigLinkPowerMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_ConfigLinkPowerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EnableLPM
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EnableAckLPM
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DisableLPM
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DisableAckLPM
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Config
</UL>

<P><STRONG><a name="[ba]"></a>USBD_ConfigPMA</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, apm32f0xx_usb_device.o(i.USBD_ConfigPMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_ConfigPMA
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Config
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HardwareInit
</UL>

<P><STRONG><a name="[ca]"></a>USBD_CtrlReceiveData</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, usbd_dataxfer.o(i.USBD_CtrlReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBD_CtrlReceiveData &rArr; USBD_EP_ReceiveCallback &rArr; USBD_EP_Receive &rArr; USBD_EP_XferStart &rArr; USBD_EP_SetTxCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ReceiveCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataOutStage
</UL>

<P><STRONG><a name="[cc]"></a>USBD_CtrlReceiveStatus</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, usbd_dataxfer.o(i.USBD_CtrlReceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USBD_CtrlReceiveStatus &rArr; USBD_EP_ReceiveCallback &rArr; USBD_EP_Receive &rArr; USBD_EP_XferStart &rArr; USBD_EP_SetTxCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ReceiveCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>

<P><STRONG><a name="[cd]"></a>USBD_CtrlSendData</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, usbd_dataxfer.o(i.USBD_CtrlSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBD_CtrlSendData &rArr; USBD_EP_TransferCallback &rArr; USBD_EP_Transfer &rArr; USBD_EP_XferStart &rArr; USBD_EP_SetTxCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_TransferCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_SetupHandler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_REQ_GetStatus
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_REQ_GetDesc
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_REQ_GetCfg
</UL>

<P><STRONG><a name="[cf]"></a>USBD_CtrlSendNextData</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, usbd_dataxfer.o(i.USBD_CtrlSendNextData))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBD_CtrlSendNextData &rArr; USBD_EP_TransferCallback &rArr; USBD_EP_Transfer &rArr; USBD_EP_XferStart &rArr; USBD_EP_SetTxCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_TransferCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>

<P><STRONG><a name="[d0]"></a>USBD_CtrlSendStatus</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, usbd_dataxfer.o(i.USBD_CtrlSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USBD_CtrlSendStatus &rArr; USBD_EP_TransferCallback &rArr; USBD_EP_Transfer &rArr; USBD_EP_XferStart &rArr; USBD_EP_SetTxCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_TransferCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataOutStage
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_REQ_SetFeature
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_REQ_SetCfg
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_REQ_SetAddress
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_REQ_GetDesc
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_REQ_ClearFeature
</UL>

<P><STRONG><a name="[d3]"></a>USBD_DataInStage</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, usbd_core.o(i.USBD_DataInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = USBD_DataInStage &rArr; USBD_CtrlSendNextData &rArr; USBD_EP_TransferCallback &rArr; USBD_EP_Transfer &rArr; USBD_EP_XferStart &rArr; USBD_EP_SetTxCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_StallCallback
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ReceiveCallback
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlSendNextData
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlReceiveStatus
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_TestModeHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStageCallback
</UL>

<P><STRONG><a name="[d6]"></a>USBD_DataInStageCallback</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_board.o(i.USBD_DataInStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = USBD_DataInStageCallback &rArr; USBD_DataInStage &rArr; USBD_CtrlSendNextData &rArr; USBD_EP_TransferCallback &rArr; USBD_EP_Transfer &rArr; USBD_EP_XferStart &rArr; USBD_EP_SetTxCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_DB_Transmit
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_CTRHandler
</UL>

<P><STRONG><a name="[d7]"></a>USBD_DataOutStage</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, usbd_core.o(i.USBD_DataOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = USBD_DataOutStage &rArr; USBD_CtrlReceiveData &rArr; USBD_EP_ReceiveCallback &rArr; USBD_EP_Receive &rArr; USBD_EP_XferStart &rArr; USBD_EP_SetTxCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlSendStatus
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataOutStageCallback
</UL>

<P><STRONG><a name="[d8]"></a>USBD_DataOutStageCallback</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_board.o(i.USBD_DataOutStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = USBD_DataOutStageCallback &rArr; USBD_DataOutStage &rArr; USBD_CtrlReceiveData &rArr; USBD_EP_ReceiveCallback &rArr; USBD_EP_Receive &rArr; USBD_EP_XferStart &rArr; USBD_EP_SetTxCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataOutStage
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_CTRHandler
</UL>

<P><STRONG><a name="[c9]"></a>USBD_DisableAckLPM</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, apm32f0xx_usb.o(i.USBD_DisableAckLPM))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ConfigLinkPowerMode
</UL>

<P><STRONG><a name="[10a]"></a>USBD_DisableInterrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apm32f0xx_usb.o(i.USBD_DisableInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HardwareInit
</UL>

<P><STRONG><a name="[c8]"></a>USBD_DisableLPM</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, apm32f0xx_usb.o(i.USBD_DisableLPM))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ConfigLinkPowerMode
</UL>

<P><STRONG><a name="[ea]"></a>USBD_EP_ClearStall</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, apm32f0xx_usb_device.o(i.USBD_EP_ClearStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBD_EP_ClearStall &rArr; USBD_EP_ResetTxToggle &rArr; USBD_EP_ToggleTx
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_SetTxStatus
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_SetRxStatus
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ResetTxToggle
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ResetRxToggle
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ClearStallCallback
</UL>

<P><STRONG><a name="[eb]"></a>USBD_EP_ClearStallCallback</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, usbd_board.o(i.USBD_EP_ClearStallCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBD_EP_ClearStallCallback &rArr; USBD_EP_ClearStall &rArr; USBD_EP_ResetTxToggle &rArr; USBD_EP_ToggleTx
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[ec]"></a>USBD_EP_Close</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, apm32f0xx_usb_device.o(i.USBD_EP_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_EP_Close &rArr; USBD_ResetEP &rArr; USBD_EP_ResetTxToggle &rArr; USBD_EP_ToggleTx
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ResetEP
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_CloseCallback
</UL>

<P><STRONG><a name="[ee]"></a>USBD_EP_CloseCallback</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, usbd_board.o(i.USBD_EP_CloseCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_EP_CloseCallback &rArr; USBD_EP_Close &rArr; USBD_ResetEP &rArr; USBD_EP_ResetTxToggle &rArr; USBD_EP_ToggleTx
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_ClassDeInitHandler
</UL>

<P><STRONG><a name="[f4]"></a>USBD_EP_Open</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, apm32f0xx_usb_device.o(i.USBD_EP_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USBD_EP_Open &rArr; USBD_ConfigEP &rArr; USBD_EP_SetRxCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ConfigEP
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_OpenCallback
</UL>

<P><STRONG><a name="[f5]"></a>USBD_EP_OpenCallback</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, usbd_board.o(i.USBD_EP_OpenCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USBD_EP_OpenCallback &rArr; USBD_EP_Open &rArr; USBD_ConfigEP &rArr; USBD_EP_SetRxCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Reset
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_ClassInitHandler
</UL>

<P><STRONG><a name="[db]"></a>USBD_EP_ReadDir</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, apm32f0xx_usb.o(i.USBD_EP_ReadDir))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_CTRHandler
</UL>

<P><STRONG><a name="[da]"></a>USBD_EP_ReadID</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, apm32f0xx_usb.o(i.USBD_EP_ReadID))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_CTRHandler
</UL>

<P><STRONG><a name="[e2]"></a>USBD_EP_ReadPacketData</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, apm32f0xx_usb.o(i.USBD_EP_ReadPacketData))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBD_EP_ReadPacketData
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_DB_Receive
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_CTRHandler
</UL>

<P><STRONG><a name="[fb]"></a>USBD_EP_ReadRxAddrPointer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, apm32f0xx_usb.o(i.USBD_EP_ReadRxAddrPointer))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_SetRxAddr
</UL>

<P><STRONG><a name="[e1]"></a>USBD_EP_ReadRxCnt</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, apm32f0xx_usb.o(i.USBD_EP_ReadRxCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBD_EP_ReadRxCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ReadRxCntPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_DB_Transmit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_DB_Receive
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_CTRHandler
</UL>

<P><STRONG><a name="[f6]"></a>USBD_EP_ReadRxCntPointer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, apm32f0xx_usb.o(i.USBD_EP_ReadRxCntPointer))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_SetRxCnt
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_SetBuffer0TxCnt
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ReadRxCnt
</UL>

<P><STRONG><a name="[f8]"></a>USBD_EP_ReadStallStatus</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, apm32f0xx_usb_device.o(i.USBD_EP_ReadStallStatus))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ReadStallStatusCallback
</UL>

<P><STRONG><a name="[f7]"></a>USBD_EP_ReadStallStatusCallback</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, usbd_board.o(i.USBD_EP_ReadStallStatusCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_EP_ReadStallStatusCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ReadStallStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[e0]"></a>USBD_EP_ReadStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, apm32f0xx_usb.o(i.USBD_EP_ReadStatus))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_XferStart
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_CTRHandler
</UL>

<P><STRONG><a name="[fc]"></a>USBD_EP_ReadTxAddrPointer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, apm32f0xx_usb.o(i.USBD_EP_ReadTxAddrPointer))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_SetTxAddr
</UL>

<P><STRONG><a name="[dd]"></a>USBD_EP_ReadTxCnt</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, apm32f0xx_usb.o(i.USBD_EP_ReadTxCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBD_EP_ReadTxCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ReadTxCntPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_DB_Transmit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_DB_Receive
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_CTRHandler
</UL>

<P><STRONG><a name="[f9]"></a>USBD_EP_ReadTxCntPointer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, apm32f0xx_usb.o(i.USBD_EP_ReadTxCntPointer))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_SetTxCnt
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_SetBuffer0RxCnt
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ReadTxCnt
</UL>

<P><STRONG><a name="[fa]"></a>USBD_EP_Receive</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, apm32f0xx_usb_device.o(i.USBD_EP_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBD_EP_Receive &rArr; USBD_EP_XferStart &rArr; USBD_EP_SetTxCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_XferStart
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ReceiveCallback
</UL>

<P><STRONG><a name="[cb]"></a>USBD_EP_ReceiveCallback</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, usbd_board.o(i.USBD_EP_ReceiveCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_EP_ReceiveCallback &rArr; USBD_EP_Receive &rArr; USBD_EP_XferStart &rArr; USBD_EP_SetTxCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlReceiveStatus
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlReceiveData
</UL>

<P><STRONG><a name="[ff]"></a>USBD_EP_ResetKind</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, apm32f0xx_usb.o(i.USBD_EP_ResetKind))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EP_ResetKind
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_XferStart
</UL>

<P><STRONG><a name="[e3]"></a>USBD_EP_ResetRxFlag</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, apm32f0xx_usb.o(i.USBD_EP_ResetRxFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EP_ResetRxFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_CTRHandler
</UL>

<P><STRONG><a name="[c3]"></a>USBD_EP_ResetRxToggle</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, apm32f0xx_usb.o(i.USBD_EP_ResetRxToggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBD_EP_ResetRxToggle &rArr; USBD_EP_ToggleRx
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ToggleRx
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ClearStall
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ResetEP
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ConfigEP
</UL>

<P><STRONG><a name="[dc]"></a>USBD_EP_ResetTxFlag</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, apm32f0xx_usb.o(i.USBD_EP_ResetTxFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EP_ResetTxFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_CTRHandler
</UL>

<P><STRONG><a name="[bf]"></a>USBD_EP_ResetTxToggle</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, apm32f0xx_usb.o(i.USBD_EP_ResetTxToggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBD_EP_ResetTxToggle &rArr; USBD_EP_ToggleTx
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ToggleTx
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ClearStall
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ResetEP
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ConfigEP
</UL>

<P><STRONG><a name="[bd]"></a>USBD_EP_SetAddr</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, apm32f0xx_usb.o(i.USBD_EP_SetAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBD_EP_SetAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ConfigEP
</UL>

<P><STRONG><a name="[ef]"></a>USBD_EP_SetBuffer0RxCnt</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, apm32f0xx_usb.o(i.USBD_EP_SetBuffer0RxCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_EP_SetBuffer0RxCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ReadTxCntPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_XferStart
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_DB_Transmit
</UL>

<P><STRONG><a name="[f1]"></a>USBD_EP_SetBuffer0TxCnt</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, apm32f0xx_usb.o(i.USBD_EP_SetBuffer0TxCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_EP_SetBuffer0TxCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ReadRxCntPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_XferStart
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_DB_Transmit
</UL>

<P><STRONG><a name="[c5]"></a>USBD_EP_SetKind</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, apm32f0xx_usb.o(i.USBD_EP_SetKind))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EP_SetKind
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_XferStart
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ConfigEP
</UL>

<P><STRONG><a name="[c1]"></a>USBD_EP_SetRxAddr</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, apm32f0xx_usb.o(i.USBD_EP_SetRxAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_EP_SetRxAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ReadRxAddrPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ConfigEP
</UL>

<P><STRONG><a name="[c2]"></a>USBD_EP_SetRxCnt</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, apm32f0xx_usb.o(i.USBD_EP_SetRxCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_EP_SetRxCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ReadRxCntPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_XferStart
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_DB_Transmit
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_CTRHandler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ConfigEP
</UL>

<P><STRONG><a name="[c4]"></a>USBD_EP_SetRxStatus</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, apm32f0xx_usb.o(i.USBD_EP_SetRxStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_EP_SetRxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_Stall
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ClearStall
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_XferStart
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_DB_Receive
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_CTRHandler
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ResetEP
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ConfigEP
</UL>

<P><STRONG><a name="[be]"></a>USBD_EP_SetTxAddr</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, apm32f0xx_usb.o(i.USBD_EP_SetTxAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_EP_SetTxAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ReadTxAddrPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ConfigEP
</UL>

<P><STRONG><a name="[f0]"></a>USBD_EP_SetTxCnt</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, apm32f0xx_usb.o(i.USBD_EP_SetTxCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_EP_SetTxCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ReadTxCntPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_XferStart
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_DB_Transmit
</UL>

<P><STRONG><a name="[c0]"></a>USBD_EP_SetTxStatus</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, apm32f0xx_usb.o(i.USBD_EP_SetTxStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBD_EP_SetTxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_Stall
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ClearStall
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_XferStart
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_DB_Transmit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ResetEP
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ConfigEP
</UL>

<P><STRONG><a name="[bc]"></a>USBD_EP_SetType</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, apm32f0xx_usb.o(i.USBD_EP_SetType))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBD_EP_SetType
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ConfigEP
</UL>

<P><STRONG><a name="[fd]"></a>USBD_EP_Stall</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, apm32f0xx_usb_device.o(i.USBD_EP_Stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_EP_Stall &rArr; USBD_EP_SetRxStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_SetTxStatus
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_SetRxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_StallCallback
</UL>

<P><STRONG><a name="[d4]"></a>USBD_EP_StallCallback</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, usbd_board.o(i.USBD_EP_StallCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_EP_StallCallback &rArr; USBD_EP_Stall &rArr; USBD_EP_SetRxStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_Stall
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_REQ_CtrlError
</UL>

<P><STRONG><a name="[f2]"></a>USBD_EP_ToggleRx</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, apm32f0xx_usb.o(i.USBD_EP_ToggleRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EP_ToggleRx
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_DB_Transmit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ResetEP
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ResetRxToggle
</UL>

<P><STRONG><a name="[e6]"></a>USBD_EP_ToggleTx</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, apm32f0xx_usb.o(i.USBD_EP_ToggleTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EP_ToggleTx
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_XferStart
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_DB_Receive
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_CTRHandler
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ResetEP
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ResetTxToggle
</UL>

<P><STRONG><a name="[fe]"></a>USBD_EP_Transfer</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, apm32f0xx_usb_device.o(i.USBD_EP_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBD_EP_Transfer &rArr; USBD_EP_XferStart &rArr; USBD_EP_SetTxCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_XferStart
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_TransferCallback
</UL>

<P><STRONG><a name="[ce]"></a>USBD_EP_TransferCallback</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, usbd_board.o(i.USBD_EP_TransferCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_EP_TransferCallback &rArr; USBD_EP_Transfer &rArr; USBD_EP_XferStart &rArr; USBD_EP_SetTxCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_TxReport
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlSendStatus
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlSendNextData
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlSendData
</UL>

<P><STRONG><a name="[f3]"></a>USBD_EP_WritePacketData</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, apm32f0xx_usb.o(i.USBD_EP_WritePacketData))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBD_EP_WritePacketData
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_XferStart
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_DB_Transmit
</UL>

<P><STRONG><a name="[e7]"></a>USBD_EP_XferStart</STRONG> (Thumb, 1646 bytes, Stack size 32 bytes, apm32f0xx_usb_device.o(i.USBD_EP_XferStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_EP_XferStart &rArr; USBD_EP_SetTxCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_WritePacketData
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ToggleTx
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_SetTxStatus
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_SetTxCnt
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_SetRxStatus
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_SetRxCnt
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_SetKind
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_SetBuffer0TxCnt
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_SetBuffer0RxCnt
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ResetKind
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ReadStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_Transfer
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_Receive
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_CTRHandler
</UL>

<P><STRONG><a name="[df]"></a>USBD_Enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apm32f0xx_usb.o(i.USBD_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetDevAddress
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_CTRHandler
</UL>

<P><STRONG><a name="[c7]"></a>USBD_EnableAckLPM</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, apm32f0xx_usb.o(i.USBD_EnableAckLPM))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ConfigLinkPowerMode
</UL>

<P><STRONG><a name="[11f]"></a>USBD_EnableInterrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apm32f0xx_usb.o(i.USBD_EnableInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
</UL>

<P><STRONG><a name="[c6]"></a>USBD_EnableLPM</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apm32f0xx_usb.o(i.USBD_EnableLPM))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ConfigLinkPowerMode
</UL>

<P><STRONG><a name="[120]"></a>USBD_EnablePullUpDP</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, apm32f0xx_usb.o(i.USBD_EnablePullUpDP))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
</UL>

<P><STRONG><a name="[100]"></a>USBD_EnumDoneCallback</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usbd_board.o(i.USBD_EnumDoneCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = USBD_EnumDoneCallback &rArr; USBD_Reset &rArr; USBD_EP_OpenCallback &rArr; USBD_EP_Open &rArr; USBD_ConfigEP &rArr; USBD_EP_SetRxCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetSpeed
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IsrHandler
</UL>

<P><STRONG><a name="[75]"></a>USBD_HID_TxReport</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, usbd_hid.o(i.USBD_HID_TxReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBD_HID_TxReport &rArr; USBD_EP_TransferCallback &rArr; USBD_EP_Transfer &rArr; USBD_EP_XferStart &rArr; USBD_EP_SetTxCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_TransferCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_TSCHandler
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidMouse_Write
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidMouse_Proc
</UL>

<P><STRONG><a name="[11b]"></a>USBD_HandleSOF</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_HandleSOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_HandleSOF
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SOFCallback
</UL>

<P><STRONG><a name="[109]"></a>USBD_HardwareInit</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, usbd_board.o(i.USBD_HardwareInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_HardwareInit &rArr; USBD_Config &rArr; USBD_ConfigPMA
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APM_DelayInit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQRequest
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DisableInterrupt
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ConfigPMA
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Config
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StartCallback
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[3e]"></a>USBD_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, apm32f0xx_int.o(i.USBD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = USBD_IRQHandler &rArr; USBD_IsrHandler &rArr; USBD_EP_CTRHandler &rArr; USBD_EP_DB_Transmit &rArr; USBD_DataInStageCallback &rArr; USBD_DataInStage &rArr; USBD_CtrlSendNextData &rArr; USBD_EP_TransferCallback &rArr; USBD_EP_Transfer &rArr; USBD_EP_XferStart &rArr; USBD_EP_SetTxCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IsrHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_apm32f072.o(RESET)
</UL>
<P><STRONG><a name="[10d]"></a>USBD_Init</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, usbd_core.o(i.USBD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_Init &rArr; USBD_HardwareInit &rArr; USBD_Config &rArr; USBD_ConfigPMA
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HardwareInit
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceInit
</UL>

<P><STRONG><a name="[10c]"></a>USBD_IsrHandler</STRONG> (Thumb, 350 bytes, Stack size 8 bytes, apm32f0xx_usb_device.o(i.USBD_IsrHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = USBD_IsrHandler &rArr; USBD_EP_CTRHandler &rArr; USBD_EP_DB_Transmit &rArr; USBD_DataInStageCallback &rArr; USBD_DataInStage &rArr; USBD_CtrlSendNextData &rArr; USBD_EP_TransferCallback &rArr; USBD_EP_Transfer &rArr; USBD_EP_XferStart &rArr; USBD_EP_SetTxCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetDevAddress
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SuspendCallback
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SOFCallback
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ResumeCallback
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EnumDoneCallback
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LpmModeCallback
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SuspendHandler
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_CTRHandler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetLowerPowerMode
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetForceSuspend
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ResetLowerPowerMode
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ResetForceSuspend
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReadIntFlag
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReadBESL
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClearIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[112]"></a>USBD_LpmModeCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, apm32f0xx_usb_device.o(i.USBD_LpmModeCallback))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IsrHandler
</UL>

<P><STRONG><a name="[108]"></a>USBD_REQ_CtrlError</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usbd_stdreq.o(i.USBD_REQ_CtrlError))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_REQ_CtrlError &rArr; USBD_EP_StallCallback &rArr; USBD_EP_Stall &rArr; USBD_EP_SetRxStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_StallCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_SetupHandler
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_REQ_SetFeature
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_REQ_SetCfg
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_REQ_SetAddress
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_REQ_GetStatus
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_REQ_GetDesc
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_REQ_GetCfg
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_REQ_ClearFeature
</UL>

<P><STRONG><a name="[117]"></a>USBD_ReadBESL</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, apm32f0xx_usb.o(i.USBD_ReadBESL))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IsrHandler
</UL>

<P><STRONG><a name="[e9]"></a>USBD_ReadIntFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, apm32f0xx_usb.o(i.USBD_ReadIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IsrHandler
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SuspendHandler
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_CTRHandler
</UL>

<P><STRONG><a name="[102]"></a>USBD_Reset</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USBD_Reset &rArr; USBD_EP_OpenCallback &rArr; USBD_EP_Open &rArr; USBD_ConfigEP &rArr; USBD_EP_SetRxCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_OpenCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EnumDoneCallback
</UL>

<P><STRONG><a name="[ed]"></a>USBD_ResetEP</STRONG> (Thumb, 156 bytes, Stack size 12 bytes, apm32f0xx_usb.o(i.USBD_ResetEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_ResetEP &rArr; USBD_EP_ResetTxToggle &rArr; USBD_EP_ToggleTx
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ToggleTx
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ToggleRx
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_SetTxStatus
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_SetRxStatus
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ResetTxToggle
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ResetRxToggle
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_Close
</UL>

<P><STRONG><a name="[123]"></a>USBD_ResetForceReset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, apm32f0xx_usb.o(i.USBD_ResetForceReset))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SuspendHandler
</UL>

<P><STRONG><a name="[111]"></a>USBD_ResetForceSuspend</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, apm32f0xx_usb.o(i.USBD_ResetForceSuspend))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IsrHandler
</UL>

<P><STRONG><a name="[110]"></a>USBD_ResetLowerPowerMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, apm32f0xx_usb.o(i.USBD_ResetLowerPowerMode))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IsrHandler
</UL>

<P><STRONG><a name="[11a]"></a>USBD_Resume</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_Resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ResumeCallback
</UL>

<P><STRONG><a name="[113]"></a>USBD_ResumeCallback</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usbd_board.o(i.USBD_ResumeCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_ResumeCallback &rArr; USBD_Resume
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Resume
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IsrHandler
</UL>

<P><STRONG><a name="[118]"></a>USBD_SOFCallback</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_board.o(i.USBD_SOFCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_SOFCallback &rArr; USBD_HandleSOF
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HandleSOF
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IsrHandler
</UL>

<P><STRONG><a name="[10f]"></a>USBD_SetDevAddress</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, apm32f0xx_usb_device.o(i.USBD_SetDevAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_SetDevAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetDeviceAddr
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IsrHandler
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetDevAddressCallback
</UL>

<P><STRONG><a name="[119]"></a>USBD_SetDevAddressCallback</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, usbd_board.o(i.USBD_SetDevAddressCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_SetDevAddressCallback &rArr; USBD_SetDevAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetDevAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_REQ_SetAddress
</UL>

<P><STRONG><a name="[de]"></a>USBD_SetDeviceAddr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, apm32f0xx_usb.o(i.USBD_SetDeviceAddr))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetDevAddress
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_CTRHandler
</UL>

<P><STRONG><a name="[122]"></a>USBD_SetForceReset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apm32f0xx_usb.o(i.USBD_SetForceReset))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SuspendHandler
</UL>

<P><STRONG><a name="[b8]"></a>USBD_SetForceSuspend</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apm32f0xx_usb.o(i.USBD_SetForceSuspend))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IsrHandler
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Config
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SuspendHandler
</UL>

<P><STRONG><a name="[116]"></a>USBD_SetLowerPowerMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apm32f0xx_usb.o(i.USBD_SetLowerPowerMode))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IsrHandler
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SuspendHandler
</UL>

<P><STRONG><a name="[101]"></a>USBD_SetSpeed</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_SetSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EnumDoneCallback
</UL>

<P><STRONG><a name="[11c]"></a>USBD_SetupStage</STRONG> (Thumb, 1074 bytes, Stack size 56 bytes, usbd_core.o(i.USBD_SetupStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = USBD_SetupStage &rArr; USBD_CtrlSendData &rArr; USBD_EP_TransferCallback &rArr; USBD_EP_Transfer &rArr; USBD_EP_XferStart &rArr; USBD_EP_SetTxCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_StallCallback
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ReadStallStatusCallback
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ClearStallCallback
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetupReqParse
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_REQ_CtrlError
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlSendStatus
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStageCallback
</UL>

<P><STRONG><a name="[e4]"></a>USBD_SetupStageCallback</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_board.o(i.USBD_SetupStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = USBD_SetupStageCallback &rArr; USBD_SetupStage &rArr; USBD_CtrlSendData &rArr; USBD_EP_TransferCallback &rArr; USBD_EP_Transfer &rArr; USBD_EP_XferStart &rArr; USBD_EP_SetTxCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_CTRHandler
</UL>

<P><STRONG><a name="[11e]"></a>USBD_Start</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, apm32f0xx_usb_device.o(i.USBD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EnablePullUpDP
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EnableInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StartCallback
</UL>

<P><STRONG><a name="[10b]"></a>USBD_StartCallback</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_board.o(i.USBD_StartCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_StartCallback &rArr; USBD_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HardwareInit
</UL>

<P><STRONG><a name="[121]"></a>USBD_Suspend</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_Suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_Suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SuspendCallback
</UL>

<P><STRONG><a name="[115]"></a>USBD_SuspendCallback</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usbd_board.o(i.USBD_SuspendCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_SuspendCallback &rArr; USBD_Suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IsrHandler
</UL>

<P><STRONG><a name="[d5]"></a>USBD_TestModeHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_TestModeHandler))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>

<P><STRONG><a name="[11d]"></a>USBH_SetupReqParse</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usbd_dataxfer.o(i.USBH_SetupReqParse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_SetupReqParse
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStage
</UL>

<P><STRONG><a name="[124]"></a>USB_DeviceInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usb_device_user.o(i.USB_DeviceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USB_DeviceInit &rArr; USBD_Init &rArr; USBD_HardwareInit &rArr; USBD_Config &rArr; USBD_ConfigPMA
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[125]"></a>__0printf$bare</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, printfb.o(i.__0printf$bare), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[137]"></a>__1printf$bare</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, printfb.o(i.__0printf$bare), UNUSED)

<P><STRONG><a name="[105]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, printfb.o(i.__0printf$bare))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_SetupHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_ClassInitHandler
</UL>

<P><STRONG><a name="[9d]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tsc_user.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevUserHandler
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_ReleaseHandler
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_DetectHandler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_REQ_GetDesc
</UL>

<P><STRONG><a name="[138]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[139]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[13a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[44]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, main.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TxData
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadStatusFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfb.o(i.__0printf$bare)
</UL>
<P><STRONG><a name="[103]"></a>free</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_ClassDeInitHandler
</UL>

<P><STRONG><a name="[3f]"></a>main</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = main &rArr; HidMouse_Proc &rArr; HidMouse_Write &rArr; USBD_HID_TxReport &rArr; USBD_EP_TransferCallback &rArr; USBD_EP_Transfer &rArr; USBD_EP_XferStart &rArr; USBD_EP_SetTxCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceInit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APM_DelayInit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APM_EVAL_PBInit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APM_EVAL_LEDInit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APM_EVAL_COMInit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_User_Config
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_User_Action
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_ReleaseHandler
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_DetectHandler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_TSCHandler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidMouse_Proc
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APM_EVAL_TMR14_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[104]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_ClassInitHandler
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5f]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, bsp_delay.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APM_DelayInit
</UL>

<P><STRONG><a name="[43]"></a>USB_DevUserHandler</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, usb_device_user.o(i.USB_DevUserHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_DevUserHandler &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_device_user.o(i.USB_DeviceInit)
</UL>
<P><STRONG><a name="[d1]"></a>USBD_DESC_Ascii2Unicode</STRONG> (Thumb, 98 bytes, Stack size 552 bytes, usbd_descriptor.o(i.USBD_DESC_Ascii2Unicode))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = USBD_DESC_Ascii2Unicode
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_ProductDescHandler
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_ManufacturerDescHandler
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_InterfaceDescHandler
</UL>

<P><STRONG><a name="[8]"></a>USBD_DevQualifierDescHandler</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, usbd_descriptor.o(i.USBD_DevQualifierDescHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBD_DevQualifierDescHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_descriptor.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>USBD_FS_ConfigDescHandler</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, usbd_descriptor.o(i.USBD_FS_ConfigDescHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBD_FS_ConfigDescHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_descriptor.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>USBD_FS_DeviceDescHandler</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, usbd_descriptor.o(i.USBD_FS_DeviceDescHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBD_FS_DeviceDescHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_descriptor.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>USBD_FS_InterfaceDescHandler</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, usbd_descriptor.o(i.USBD_FS_InterfaceDescHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = USBD_FS_InterfaceDescHandler &rArr; USBD_DESC_Ascii2Unicode
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DESC_Ascii2Unicode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_descriptor.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>USBD_FS_LangIdDescHandler</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, usbd_descriptor.o(i.USBD_FS_LangIdDescHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBD_FS_LangIdDescHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_descriptor.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>USBD_FS_ManufacturerDescHandler</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, usbd_descriptor.o(i.USBD_FS_ManufacturerDescHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = USBD_FS_ManufacturerDescHandler &rArr; USBD_DESC_Ascii2Unicode
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DESC_Ascii2Unicode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_descriptor.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>USBD_FS_ProductDescHandler</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, usbd_descriptor.o(i.USBD_FS_ProductDescHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = USBD_FS_ProductDescHandler &rArr; USBD_DESC_Ascii2Unicode
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DESC_Ascii2Unicode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_descriptor.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>USBD_FS_SerialDescHandler</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, usbd_descriptor.o(i.USBD_FS_SerialDescHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBD_FS_SerialDescHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_descriptor.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>USBD_OtherSpeedConfigDescHandler</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, usbd_descriptor.o(i.USBD_OtherSpeedConfigDescHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBD_OtherSpeedConfigDescHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_descriptor.o(.data)
</UL>
<P><STRONG><a name="[80]"></a>SystemClock48M</STRONG> (Thumb, 210 bytes, Stack size 0 bytes, system_apm32f0xx.o(i.SystemClock48M))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
</UL>

<P><STRONG><a name="[7f]"></a>SystemClockConfig</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_apm32f0xx.o(i.SystemClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemClockConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock48M
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[79]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, apm32f0xx_misc.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQRequest
</UL>

<P><STRONG><a name="[d9]"></a>USBD_EP_CTRHandler</STRONG> (Thumb, 702 bytes, Stack size 40 bytes, apm32f0xx_usb_device.o(i.USBD_EP_CTRHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = USBD_EP_CTRHandler &rArr; USBD_EP_DB_Transmit &rArr; USBD_DataInStageCallback &rArr; USBD_DataInStage &rArr; USBD_CtrlSendNextData &rArr; USBD_EP_TransferCallback &rArr; USBD_EP_Transfer &rArr; USBD_EP_XferStart &rArr; USBD_EP_SetTxCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetupStageCallback
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataOutStageCallback
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStageCallback
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_XferStart
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_DB_Transmit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_DB_Receive
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetDeviceAddr
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReadIntFlag
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Enable
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ToggleTx
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_SetRxStatus
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_SetRxCnt
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ResetTxFlag
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ResetRxFlag
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ReadTxCnt
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ReadStatus
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ReadRxCnt
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ReadPacketData
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ReadID
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ReadDir
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IsrHandler
</UL>

<P><STRONG><a name="[e5]"></a>USBD_EP_DB_Receive</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, apm32f0xx_usb_device.o(i.USBD_EP_DB_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBD_EP_DB_Receive &rArr; USBD_EP_ReadPacketData
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ToggleTx
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_SetRxStatus
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ReadTxCnt
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ReadRxCnt
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ReadPacketData
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_CTRHandler
</UL>

<P><STRONG><a name="[e8]"></a>USBD_EP_DB_Transmit</STRONG> (Thumb, 532 bytes, Stack size 40 bytes, apm32f0xx_usb_device.o(i.USBD_EP_DB_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = USBD_EP_DB_Transmit &rArr; USBD_DataInStageCallback &rArr; USBD_DataInStage &rArr; USBD_CtrlSendNextData &rArr; USBD_EP_TransferCallback &rArr; USBD_EP_Transfer &rArr; USBD_EP_XferStart &rArr; USBD_EP_SetTxCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStageCallback
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_WritePacketData
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ToggleRx
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_SetTxStatus
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_SetTxCnt
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_SetRxCnt
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_SetBuffer0TxCnt
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_SetBuffer0RxCnt
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ReadTxCnt
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_ReadRxCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_CTRHandler
</UL>

<P><STRONG><a name="[114]"></a>USBD_SuspendHandler</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, apm32f0xx_usb_device.o(i.USBD_SuspendHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_SuspendHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetLowerPowerMode
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetForceSuspend
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetForceReset
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ResetForceReset
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReadIntFlag
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClearIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IsrHandler
</UL>

<P><STRONG><a name="[a]"></a>USBD_REQ_ClearFeature</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, usbd_stdreq.o(i.USBD_REQ_ClearFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USBD_REQ_ClearFeature &rArr; USBD_CtrlSendStatus &rArr; USBD_EP_TransferCallback &rArr; USBD_EP_Transfer &rArr; USBD_EP_XferStart &rArr; USBD_EP_SetTxCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_REQ_CtrlError
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlSendStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_stdreq.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>USBD_REQ_GetCfg</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, usbd_stdreq.o(i.USBD_REQ_GetCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USBD_REQ_GetCfg &rArr; USBD_CtrlSendData &rArr; USBD_EP_TransferCallback &rArr; USBD_EP_Transfer &rArr; USBD_EP_XferStart &rArr; USBD_EP_SetTxCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_REQ_CtrlError
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlSendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_stdreq.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>USBD_REQ_GetDesc</STRONG> (Thumb, 604 bytes, Stack size 40 bytes, usbd_stdreq.o(i.USBD_REQ_GetDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = USBD_REQ_GetDesc &rArr; USBD_CtrlSendData &rArr; USBD_EP_TransferCallback &rArr; USBD_EP_Transfer &rArr; USBD_EP_XferStart &rArr; USBD_EP_SetTxCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_REQ_CtrlError
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlSendStatus
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlSendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_stdreq.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>USBD_REQ_GetItf</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_stdreq.o(i.USBD_REQ_GetItf))
<BR>[Address Reference Count : 1]<UL><LI> usbd_stdreq.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>USBD_REQ_GetStatus</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, usbd_stdreq.o(i.USBD_REQ_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USBD_REQ_GetStatus &rArr; USBD_CtrlSendData &rArr; USBD_EP_TransferCallback &rArr; USBD_EP_Transfer &rArr; USBD_EP_XferStart &rArr; USBD_EP_SetTxCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_REQ_CtrlError
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlSendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_stdreq.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>USBD_REQ_SetAddress</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, usbd_stdreq.o(i.USBD_REQ_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USBD_REQ_SetAddress &rArr; USBD_CtrlSendStatus &rArr; USBD_EP_TransferCallback &rArr; USBD_EP_Transfer &rArr; USBD_EP_XferStart &rArr; USBD_EP_SetTxCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetDevAddressCallback
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_REQ_CtrlError
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlSendStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_stdreq.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>USBD_REQ_SetCfg</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, usbd_stdreq.o(i.USBD_REQ_SetCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USBD_REQ_SetCfg &rArr; USBD_CtrlSendStatus &rArr; USBD_EP_TransferCallback &rArr; USBD_EP_Transfer &rArr; USBD_EP_XferStart &rArr; USBD_EP_SetTxCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_REQ_CtrlError
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlSendStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_stdreq.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>USBD_REQ_SetDesc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_stdreq.o(i.USBD_REQ_SetDesc))
<BR>[Address Reference Count : 1]<UL><LI> usbd_stdreq.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>USBD_REQ_SetFeature</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, usbd_stdreq.o(i.USBD_REQ_SetFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USBD_REQ_SetFeature &rArr; USBD_CtrlSendStatus &rArr; USBD_EP_TransferCallback &rArr; USBD_EP_Transfer &rArr; USBD_EP_XferStart &rArr; USBD_EP_SetTxCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_REQ_CtrlError
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlSendStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_stdreq.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>USBD_REQ_SetItf</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_stdreq.o(i.USBD_REQ_SetItf))
<BR>[Address Reference Count : 1]<UL><LI> usbd_stdreq.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>USBD_REQ_SyncFrame</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_stdreq.o(i.USBD_REQ_SyncFrame))
<BR>[Address Reference Count : 1]<UL><LI> usbd_stdreq.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>USBD_HID_ClassDeInitHandler</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, usbd_hid.o(i.USBD_HID_ClassDeInitHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USBD_HID_ClassDeInitHandler &rArr; USBD_EP_CloseCallback &rArr; USBD_EP_Close &rArr; USBD_ResetEP &rArr; USBD_EP_ResetTxToggle &rArr; USBD_EP_ToggleTx
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_CloseCallback
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_hid.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>USBD_HID_ClassInitHandler</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, usbd_hid.o(i.USBD_HID_ClassInitHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USBD_HID_ClassInitHandler &rArr; USBD_EP_OpenCallback &rArr; USBD_EP_Open &rArr; USBD_ConfigEP &rArr; USBD_EP_SetRxCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_OpenCallback
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_hid.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>USBD_HID_DataInHandler</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, usbd_hid.o(i.USBD_HID_DataInHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBD_HID_DataInHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_hid.o(.data)
</UL>
<P><STRONG><a name="[107]"></a>USBD_HID_DescHandler</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, usbd_hid.o(i.USBD_HID_DescHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBD_HID_DescHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_SetupHandler
</UL>

<P><STRONG><a name="[106]"></a>USBD_HID_ReportDescHandler</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, usbd_hid.o(i.USBD_HID_ReportDescHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBD_HID_ReportDescHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_SetupHandler
</UL>

<P><STRONG><a name="[16]"></a>USBD_HID_SOFHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_hid.o(i.USBD_HID_SOFHandler))
<BR>[Address Reference Count : 1]<UL><LI> usbd_hid.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>USBD_HID_SetupHandler</STRONG> (Thumb, 476 bytes, Stack size 56 bytes, usbd_hid.o(i.USBD_HID_SetupHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = USBD_HID_SetupHandler &rArr; USBD_CtrlSendData &rArr; USBD_EP_TransferCallback &rArr; USBD_EP_Transfer &rArr; USBD_EP_XferStart &rArr; USBD_EP_SetTxCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_ReportDescHandler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_DescHandler
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_REQ_CtrlError
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlSendData
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_hid.o(.data)
</UL>
<P><STRONG><a name="[a8]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, tsc_time.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_Time_Config
</UL>

<P><STRONG><a name="[126]"></a>_printf_core</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfb.o(i._printf_core), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$bare
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
